using ZmenyPocasi;

namespace ZmenyPocasiTests
{
    [TestClass]
    public class Tests
    {
        void Base(int[] data, string expected)
        {
            string output = Program.VyresProblem(data);
            Assert.AreEqual(expected, output);
        }

        [TestMethod] public void Test1() => Base([21, 29], "8");
        [TestMethod] public void Test2() => Base([28, 9, 18, 1, 23, 10, 6, 1, 28, 6, 17, 18, 6, 25, 17, 0, 24, 35, 36, 18, 23, 14, 2, 2, 8, 32, 9, 10, 5, 40, 19, 24, 26, 24, 27, 30, 18, 29, 26, 36, 0, 37, 39, 30, 34, 31, 32, 31, 20, 39, 10, 24, 22, 17, 31, 40, 1, 32, 26, 39, 4, 1, 6, 37, 6, 27, 9, 8, 36, 14, 29, 8, 7, 20, 26, 9, 15, 21, 26, 15, 18, 10, 28, 40, 35, 14, 33, 30, 40, 19, 6, 39, 19, 10, 12, 33, 27, 15, 22, 40, 8, 0, 7, 29, 14, 17, 21, 13, 3, 15, 25, 26, 26, 19, 16, 6, 6, 34, 5, 10, 13, 2, 15, 13, 14, 37, 34, 20, 26, 30, 22, 30, 17, 30, 17, 23, 27, 8, 27, 4, 18, 16, 30, 9, 17, 21, 11, 21, 18, 40, 13, 4, 40, 36, 30, 34, 11, 0, 9, 31, 37, 38, 0, 8, 24, 18, 9, 3, 31, 8, 21, 17, 32, 28, 40, 38, 5, 30, 17, 39, 30, 21, 26, 20, 3, 25, 31, 28, 0, 11, 16], "39");
        [TestMethod] public void Test3() => Base([27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27], "0");
        [TestMethod] public void Test4() => Base([12, 23, 21, 38, 4, 4, 13, 19, 14, 13, 26, 4, 18, 24, 24, 9, 34, 21, 17, 3, 15, 38, 0, 38, 21, 2, 24, 30, 7, 2, 36, 37, 8, 21, 21, 35, 22, 35, 24, 17, 31, 29, 5, 34, 0, 39, 7, 39, 16, 37, 15, 13, 27, 28, 33, 30, 6, 16, 1, 23, 36, 26, 0, 11, 27, 2, 14, 38, 35, 12, 7, 0, 12, 35, 13, 22, 14, 38, 21, 23, 18, 10, 31, 26, 23, 28, 26, 24, 1, 20, 36, 30, 9, 26, 1, 36, 10, 27, 29, 3, 40, 22, 27, 0, 26, 11, 4, 37, 24, 40, 34, 11, 20, 11, 29, 17, 31, 7, 34, 11, 8, 38, 31, 6, 4, 29, 4, 3, 22, 7, 33, 31, 33, 0, 19, 3, 0, 25, 16, 25, 32, 10, 39, 10, 23, 39, 35, 12, 22, 17, 34, 37, 2, 12, 10, 38, 0, 29, 9, 27, 4, 12, 27, 30, 13, 8, 12, 31, 13, 6, 38, 21, 27, 22, 28, 31, 1, 6, 20, 20, 35, 3, 13, 6, 31, 18, 15, 21, 9, 2, 2, 22, 11, 11, 36, 0, 10, 20, 22, 23], "39");
        [TestMethod] public void Test5() => Base([6, 2, 5, 7, 9, 8, 0, 10, 3, 4, 2, 0, 9, 6, 2, 10, 1, 10, 4, 2, 2, 7, 10, 8, 10, 0, 5, 9, 5, 2, 0, 1, 2, 1, 2, 5, 4, 1, 7, 6, 9, 8, 9, 5, 9, 6, 7, 6, 7, 3, 9, 8, 6, 2, 9, 6, 9, 1, 7, 3, 3, 8, 8, 9, 3, 3, 0, 3, 9, 7, 0, 7, 9, 7, 10, 2, 8, 0, 2, 9, 1, 4, 9, 5, 0, 7, 8, 7, 8, 8, 0, 9, 9, 7, 3, 1, 6, 8, 1, 10, 4, 0, 6, 0, 4, 5, 3, 7, 1, 1, 8, 0, 7, 8, 6, 8, 5, 2, 10, 3, 3, 5, 1, 1, 7, 6, 1, 8, 10, 7, 5, 10, 1, 1, 0, 5, 4, 10, 10, 4, 1, 5, 1, 5, 1, 10, 10, 7, 9, 4, 5, 10, 5, 6, 5, 9, 9, 1, 2, 1, 0, 0, 1, 3, 6, 9, 7, 8, 4, 0, 9, 0, 7, 8, 3, 8, 10, 3, 0, 0, 2, 7, 2, 9, 3, 5, 2, 3, 5, 7, 1, 10, 1, 9, 0, 8, 2, 0, 9, 39], "30");
        [TestMethod] public void Test6() => Base([22, 2, 27, 16, 32, 4, 20, 36, 30, 13, 29, 9, 18, 31, 30, 5, 38, 14, 13, 12, 16, 35, 30, 13, 18, 33, 15, 40, 30, 19, 13, 27, 31, 10, 26, 37, 1, 9, 29, 39, 25, 4, 15, 1, 35, 23, 36, 21, 23, 30, 19, 0, 21, 26, 32, 36, 16, 37, 32, 31, 29, 16, 17, 11, 6, 33, 27, 21, 6, 30, 17, 15, 28, 8, 30, 14, 29, 30, 22, 39, 23, 2, 22, 0, 14, 23, 18, 12, 20, 8, 9, 11, 18, 17, 32, 17, 7, 12, 14, 27, 3, 26, 1, 35, 40, 28, 39, 38, 23, 25, 4, 8, 13, 40, 32, 17, 16, 14, 13, 32, 28, 27, 18, 0, 20, 38, 2, 15, 11, 30, 27, 31, 4, 0, 7, 6, 21, 23, 36, 40, 28, 33, 22, 2, 25, 34, 14, 29, 17, 27, 28, 17, 16, 29, 7, 3, 18, 10, 0, 0, 20, 33, 28, 31, 13, 6, 4, 25, 28, 27, 30, 7, 29, 17, 29, 18, 13, 6, 39, 34, 40, 2, 0, 37, 19, 35, 25, 14, 29, 31, 17, 23, 37, 11, 38, 10, 29], "38");
        [TestMethod] public void Test7() => Base([38, 3, 9, 8, 1, 1, 0, 3, 3, 2, 5, 1, 0, 0, 8, 4, 4, 8, 5, 3, 6, 5, 8, 0, 2, 8, 7, 3, 3, 8, 7, 5, 0, 10, 8, 4, 10, 4, 4, 2, 3, 10, 9, 7, 5, 7, 5, 1, 7, 3, 10, 7, 3, 8, 10, 9, 4, 10, 3, 9, 9, 0, 7, 3, 2, 1, 10, 6, 10, 5, 4, 7, 0, 7, 3, 0, 0, 4, 0, 2, 6, 9, 8, 8, 5, 9, 8, 7, 1, 7, 9, 5, 7, 5, 0, 3, 2, 6, 0, 6, 3, 9, 1, 4, 0, 7, 9, 10, 8, 8, 6, 10, 7, 4, 2, 6, 10, 6, 6, 5, 7, 2, 0, 10, 3, 6, 1, 2, 9, 7, 1, 9, 7, 5, 3, 3, 9, 7, 7, 7, 2, 2, 1, 1, 8, 9, 6, 8, 8, 3, 9, 5, 5, 6, 5, 2, 0, 9, 3, 4, 1, 7, 3, 0, 2, 9, 7, 9, 10, 6, 10, 9, 9, 8, 4, 10, 9, 5, 3, 1, 10, 3, 2, 0, 9, 5, 9, 3, 4, 3, 8, 5, 2, 4, 6, 4, 7, 7, 10, 1], "35");
        [TestMethod] public void Test8() => Base([27, 8, 15, 35, 0, 27, 14, 8, 25, 20, 23, 28, 26, 14, 26, 35, 27, 34, 9, 33, 0, 19, 32, 5, 26, 15, 12, 27, 24, 28, 20, 21, 32, 5, 1, 3, 1, 6, 5, 9, 35, 9, 24, 18, 19, 1, 25, 26, 21, 17, 19, 10, 21, 1, 13, 2, 40, 8, 1, 11, 40, 17, 26, 0, 3, 12, 37, 33, 6, 17, 25, 36, 40, 25, 23, 24, 30, 36, 16, 40, 0, 4, 16, 1, 28, 22, 3, 16, 30, 8, 37, 40, 24, 6, 36, 16, 35, 28, 3, 11, 27, 25, 10, 26, 34, 30, 31, 22, 36, 13, 32, 32, 8, 14, 22, 22, 22, 36, 31, 2, 38, 10, 0, 1, 3, 0, 34, 28, 2, 1, 34, 7, 40, 2, 5, 23, 22, 33, 15, 10, 38, 10, 37, 36, 0, 13, 28, 12, 32, 10, 19, 38, 6, 40, 17, 2, 30, 18, 17, 40, 22, 33, 14, 9, 37, 1, 1, 23, 33, 37, 7, 32, 33, 8, 6, 29, 26, 22, 23, 17, 17, 39, 18, 23, 38, 32, 26, 8, 22, 35, 20, 12], "40");
        [TestMethod] public void Test9() => Base([17, 22, 17, 4, 8, 27, 31, 33, 1, 25, 13, 4, 25, 6, 15, 31, 5, 12, 35, 38, 36, 12, 7, 6, 24, 16, 27, 31, 11, 40, 16, 36, 14, 2, 0, 13, 6, 1, 32, 15, 40, 18, 21, 2, 14, 13, 37, 36, 15, 8, 29, 9, 11, 35, 20, 16, 9, 36, 30, 8, 3, 32, 18, 20, 6, 37, 5, 9, 37, 11, 1, 2, 2, 7, 14, 17, 5, 40, 3, 8, 7, 7, 12, 12, 36, 16, 16, 4, 9, 22, 4, 21, 2, 16, 13, 4, 11, 19, 18, 33, 21, 28, 5, 19, 15, 0, 8, 7, 36, 40, 6, 16, 12, 0, 21, 11, 39, 3, 32, 19, 17, 11, 18, 28, 29, 2, 39, 16, 34, 18, 19, 37, 12, 7, 12, 39, 16, 0, 5, 3, 34, 35, 35, 18, 31, 7, 29, 19, 17, 28, 30, 17, 33, 30, 30, 22, 31, 11, 20, 39, 5, 25, 6, 35, 38, 5, 19, 27, 13, 11, 11, 31, 39, 32, 8, 36, 17, 6, 35, 30, 31, 31, 32, 6, 37, 22, 0, 38, 26, 0, 35, 6, 25, 11, 10, 29, 40, 10, 8, 15], "38");
        [TestMethod] public void Test10() => Base([8, 14, 40, 3, 33, 34, 3, 15, 22, 22, 31, 27, 6, 21, 13, 33, 20, 4, 25, 24, 14, 21, 21, 27, 10, 24, 17, 29, 2, 38, 15, 17, 22, 1, 28, 5, 22, 1, 39, 24, 24, 29, 22, 0, 18, 33, 15, 26, 19, 36, 40, 16, 31, 40, 29, 21, 37, 37, 33, 19, 32, 27, 11, 1, 24, 26, 32, 32, 23, 9, 8, 8, 24, 39, 18, 16, 4, 0, 7, 40, 21, 32, 14, 32, 16, 25, 26, 11, 23, 0, 32, 21, 0, 38, 32, 7, 37, 38, 29, 40, 31, 17, 28, 6, 33, 40, 7, 21, 34, 13, 24, 35, 16, 3, 14, 39, 38, 17, 15, 20, 8, 25, 9, 22, 33, 29, 15, 18, 30, 17, 31, 13, 25, 19, 33, 18, 19, 18, 2, 10, 9, 25, 33, 22, 28, 0, 0, 33, 37, 34, 9, 33, 16, 25, 38, 27, 8, 28, 35, 27, 6, 25, 29, 16, 29, 36, 38, 9, 33, 9, 15, 14, 20, 36, 6, 38, 29, 34, 40, 3, 3, 26, 36, 20, 25, 23, 27, 19, 39, 15, 9, 27], "38");
    }
}
